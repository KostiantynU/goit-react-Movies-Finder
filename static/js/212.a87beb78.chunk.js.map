{"version":3,"file":"static/js/212.a87beb78.chunk.js","mappings":"qQACaA,EAAmBC,EAAAA,GAAAA,GAAH,8CCAhBC,EAAmBD,EAAAA,GAAAA,GAAH,4FAKhBE,EAAcF,EAAAA,GAAAA,GAAH,yCAGXG,EAAiBH,EAAAA,GAAAA,EAAH,yC,SCK3B,MAXA,YAA0C,IAApBI,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,QAC5B,OACE,+BACE,UAACJ,EAAD,YACE,SAACC,EAAD,UAAcE,KACd,SAACD,EAAD,UAAiBE,QAIxB,ECkCD,MAvCA,WACE,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAOR,OANAE,EAAAA,EAAAA,YAAU,WACRH,GAAY,IACZI,EAAAA,EAAAA,IAAUH,GACPI,MAAK,SAAAC,GAAQ,OAAIR,EAAUQ,EAASC,QAAvB,IACbC,QAAQR,GAAY,GACxB,GAAE,CAACC,KAEF,gCACGF,IACC,SAAC,KAAD,CACEU,OAAO,MACPC,MAAM,MACNC,OAAO,KACPC,MAAM,oBACNC,UAAU,gBACVC,aAAc,CAAEC,eAAgB,UAChCC,iBAAiB,GACjBC,SAAS,IAGZpB,EAAOqB,OAAS,GACf,0BACE,SAAC7B,EAAD,iBACGQ,QADH,IACGA,OADH,EACGA,EAAQsB,KAAI,gBAAGC,EAAH,EAAGA,GAAI1B,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,SAAC,EAAD,CAAqBD,OAAQA,EAAQC,QAASA,GAA7ByB,EADN,SAMjB,yBAAK,6CAIZ,C,iNC5CKC,EAAU,2CACVC,EAAW,gCACXC,EAAY,qBACLC,EAAa,kCAEnB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACQC,MAAM,GAAD,OAAIJ,GAAJ,OAAeC,EAAf,YAA4BF,IAC3ChB,MAAK,SAAAC,GAAQ,OAAIA,EAASqB,MAAb,IACbC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,IAHP,0GAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAwB/B,GAAxB,iFACQyB,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBrB,EAArB,YAAgCoB,EAAhC,oBACfhB,MAAK,SAAAC,GAAQ,OAAIA,EAASqB,MAAb,IACbC,OAAM,SAAAC,GAAG,OAAIC,QAAQG,MAAMJ,EAAlB,IAHP,0GAKA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA0BjC,GAA1B,iFACQyB,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBrB,EAArB,oBAAwCoB,EAAxC,oBACfhB,MAAK,SAAAC,GAAQ,OAAIA,EAASqB,MAAb,IACbC,OAAM,SAAAC,GAAG,OAAIC,QAAQG,MAAMJ,EAAlB,IAHP,0GAKA,SAAezB,EAAtB,+CAAO,OAAP,oBAAO,WAAyBH,GAAzB,iFACQyB,MAAM,GAAD,OAAIJ,EAAJ,iBAAqBrB,EAArB,oBAAwCoB,EAAxC,2BACfhB,MAAK,SAAAC,GAAQ,OAAIA,EAASqB,MAAb,IACbC,OAAM,SAAAC,GAAG,OAAIC,QAAQG,MAAMJ,EAAlB,IAHP,0GAKA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,iFACQV,MAAM,GAAD,OAAIJ,EAAJ,wBAA4BD,EAA5B,kBAA6Ce,IAC5D/B,MAAK,SAAAC,GAAQ,OAAIA,EAASqB,MAAb,IACbC,OAAM,SAAAC,GAAG,OAAIC,QAAQG,MAAMJ,EAAlB,IAHP,0G","sources":["components/Reviews/Review.styled.js","components/ReviewItem/ReviewItem.styled.js","components/ReviewItem/ReviewItem.jsx","components/Reviews/Reviews.jsx","services/API.js"],"sourcesContent":["import styled from 'styled-components';\nexport const ReviewStyledList = styled.ul`\n  margin-left: 20px;\n`;\n","import styled from 'styled-components';\nexport const ReviewItemStyled = styled.li`\n  :nth-child(2n) {\n    background-color: rgb(245, 251, 252);\n  }\n`;\nexport const AuthorTitle = styled.h4`\n  margin: 20px;\n`;\nexport const OverviewStyled = styled.p`\n  margin: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { ReviewItemStyled, AuthorTitle, OverviewStyled } from './ReviewItem.styled';\n\nfunction ReviewItem({ author, content }) {\n  return (\n    <>\n      <ReviewItemStyled>\n        <AuthorTitle>{author}</AuthorTitle>\n        <OverviewStyled>{content}</OverviewStyled>\n      </ReviewItemStyled>\n    </>\n  );\n}\n\nexport default ReviewItem;\n\nReviewItem.propTypes = {\n  author: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReview } from 'services/API';\nimport { Watch } from 'react-loader-spinner';\nimport { ReviewStyledList } from './Review.styled';\nimport ReviewItem from 'components/ReviewItem/ReviewItem';\n\nfunction Reviews() {\n  const [review, setReview] = useState([]);\n  const [isLoader, setIsLoader] = useState(false);\n  const { movieId } = useParams();\n  useEffect(() => {\n    setIsLoader(true);\n    getReview(movieId)\n      .then(response => setReview(response.results))\n      .finally(setIsLoader(false));\n  }, [movieId]);\n  return (\n    <>\n      {isLoader && (\n        <Watch\n          height=\"100\"\n          width=\"100\"\n          radius=\"48\"\n          color=\"rgb(73, 203, 230)\"\n          ariaLabel=\"watch-loading\"\n          wrapperStyle={{ justifyContent: 'center' }}\n          wrapperClassName=\"\"\n          visible={true}\n        />\n      )}\n      {review.length > 0 ? (\n        <div>\n          <ReviewStyledList>\n            {review?.map(({ id, author, content }) => (\n              <ReviewItem key={id} author={author} content={content}></ReviewItem>\n            ))}\n          </ReviewStyledList>\n        </div>\n      ) : (\n        <div>We dont have any reviews on this movie</div>\n      )}\n    </>\n  );\n}\n\nexport default Reviews;\n","const API_KEI = 'api_key=01e602e077bffb2dd10fabcf093ebced';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst TREND_DAY = 'trending/movie/day';\nexport const IMAGE_PATH = 'https://image.tmdb.org/t/p/w300';\n\nexport async function getMovies() {\n  return await fetch(`${BASE_URL}${TREND_DAY}?${API_KEI}`)\n    .then(response => response.json())\n    .catch(err => console.log(err));\n}\nexport async function getMovie(movieId) {\n  return await fetch(`${BASE_URL}movie/${movieId}?${API_KEI}&language=en-US`)\n    .then(response => response.json())\n    .catch(err => console.error(err));\n}\nexport async function getCredits(movieId) {\n  return await fetch(`${BASE_URL}movie/${movieId}/credits?${API_KEI}&language=en-US`)\n    .then(response => response.json())\n    .catch(err => console.error(err));\n}\nexport async function getReview(movieId) {\n  return await fetch(`${BASE_URL}movie/${movieId}/reviews?${API_KEI}&language=en-US&page=1`)\n    .then(response => response.json())\n    .catch(err => console.error(err));\n}\nexport async function searchMovies(query) {\n  return await fetch(`${BASE_URL}search/movie?${API_KEI}&query=${query}`)\n    .then(response => response.json())\n    .catch(err => console.error(err));\n}\n"],"names":["ReviewStyledList","styled","ReviewItemStyled","AuthorTitle","OverviewStyled","author","content","useState","review","setReview","isLoader","setIsLoader","movieId","useParams","useEffect","getReview","then","response","results","finally","height","width","radius","color","ariaLabel","wrapperStyle","justifyContent","wrapperClassName","visible","length","map","id","API_KEI","BASE_URL","TREND_DAY","IMAGE_PATH","getMovies","fetch","json","catch","err","console","log","getMovie","error","getCredits","searchMovies","query"],"sourceRoot":""}